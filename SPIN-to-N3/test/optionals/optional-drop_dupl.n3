@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix : <http://example.org/> .

# # A. example where opt doesn't work
# { :x1 :p ?v } :opt { :x3 :q ?w } . # (change x3 to x2 to have optional working)

# :x1 :p 1 .
# :x2 :q 2 .


# # B. example where nested opt doesn't work
# { :x1 :p ?v } :opt { { :x2 :q ?w } :opt { :x4 :p ?x } } . # (change x4 to x3 to have nested opt working)

# :x1 :p 1 .
# :x2 :q 2 .
# :x3 :p 3 .


# # C. outer optional block is ruled out due to conflicting binding in deeper optional
# # (although highest-up optional works)

# { :x1 :p ?v } :opt { { :x2 :q ?w } :opt { :x3 :p ?v } } .

# :x1 :p 1 . # won't work
# # :x1 :p 3 . # works
# :x2 :q 2 .
# :x3 :p 3 .


# D. example illustrating per-query vs. per-binding issue
# { ?x :p ?v } :opt { ?x :q ?w } .
{ ?x :p ?v } :opt { { ?x :p2 ?v } :opt { ?x :q ?w } } .

:x1 :p 1 .
:x1 :p2 1 .
:x1 :q 1 .

:x3 :p 3 .
:x3 :p2 3 .

{ 
    ?x :opt ?y .
    "opt" log:trace "opt" .
    ( ?z
    {
        ( ?x ?y ) :bubble ?z .
        true log:call ?z .
        
    } ?zs ) log:collectAllIn _:t .

    ?sol list:in ?zs .
    ( ?sol2 {
        ?sol2 list:in ?zs .
        ?sol2 log:notEqualTo ?sol .
        ?sol2 log:includes ?sol .
        
    } () ) log:collectAllIn _:t .
}
=> { <> :out ?sol } .

# { 
#     ?x :opt ?y .
#     "opt" log:trace "opt" .
#     ( ?x ?y ) :bubble ?z .
#     true log:call ?z .
#     "opt (2)" log:trace ?z .
# }
# => { <> :out ?z }.

{ ( ?x ?y ) :bubble ?z }
<= { 
    ?y log:equalTo { ?o1 :opt ?o2 } .
    "bubble1" log:trace ( ?o1 ?o2 ) .
    ( ?o1 ?o2 ) :bubble ?o_w .
    ( ?x ?o_w ) :oneOrBoth ?z .
    "bubble1 (2)" log:trace ( ?z ) .
} .

{ ( ?x ?y ) :bubble ?z }
<= { 
    ?y log:notIncludes { ?k :opt ?l } . # (log:notEqualTo was not working)
    "bubble2" log:trace ( ?y ) .
    ( ?x ?y ) :oneOrBoth ?z .
    "bubble2 (2)" log:trace ( ?z ) .
} .

{ ( ?x ?y ) :oneOrBoth ?conj }
<= {
    ( ?x ?y ) log:conjunction ?conj .
    "oneOrBoth" log:trace ( "try" ?conj ) .
    ?conj log:copy ?cout .
    true log:call ?cout .
    "oneOrBoth (2)" log:trace ?conj, ?cout .
} .

{ ( ?x ?y ) :oneOrBoth ?x }
<= {
    ?x log:copy ?xout .
    true log:call ?xout .
    ( ?x ?y ) log:conjunction ?conj .
    "oneOrBoth2" log:trace ( "try" ?conj ) .
    ?conj log:copy ?cout .
    ?cout log:includes ?xout .
    _:t log:notIncludes ?cout .
    "oneOrBoth2 (2)" log:trace ?x, ?xout .
} .