@prefix aux: <http://example.org/aux#> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .

######################################
# OPTIONAL
#####################################


# predicate returns bindings in out and pattern which matched with ?call
{?pattern aux:optionalQ ?opt }<={ 
(?pattern ?opt)  aux:getCallPattern (?out ?call).

 ?call log:includes ?out.    
 }.

{(?pattern ?optional)  aux:getCallPattern (?out ?call).}<={

  # ?pattern aux:variableCheck true.
  # ?pattern log:equalTo {?p1 aux:optionalQ ?o1}. 
  # true log:callWithCut true.
  # (?p1 ?o1)  aux:getCallPattern (?out1 ?call1).
  ?pattern aux:unnest (?out1 ?call1).

  ?optional aux:unnest (?out2 ?call2).



   (?out1 ?call1 ?out2 ?call2) aux:tryOptional (?out ?call).

   }.



# un-nest 
{?pattern aux:unnest (?out1 ?call1)}<=
{  
   ?pattern aux:variableCheck true.
   ?pattern log:equalTo {?p1 aux:optionalQ ?o1}. 
   true log:callWithCut true.
   (?p1 ?o1)  aux:getCallPattern (?out1 ?call1).

   }.
 
{?call aux:unnest(?out ?call )}<=
{ 
?call log:rawType ?t.
?t log:equalTo log:Formula.
?call log:copy ?out.
2 e:trace {?call log:copy ?out.}.
(_:x _:y) log:includes ?out.

#  ?pattern log:notEqualTo {?p1 aux:optionalQ ?o1}. 
#  true log:callWithCut true.
}.

# try optional
{(?out1 ?call1 ?out2 ?call2) aux:tryOptional (?out ?call)}
<=
{   
   (?call2 ?call1) log:conjunction ?call.
   ?call log:copy ?out.
   3 e:trace {?call log:copy ?out.}.
   ?out log:includes ?out1, ?out2.
}.

{(?out1 ?call1 ?out2 ?call2) aux:tryOptional (?out1 ?call1).}
<=
{  

   (?call2 ?call1) log:conjunction ?call.
   ?call log:copy ?out.
   1 e:trace {?call log:copy ?out.}.
   ?out log:includes ?out1.
   ?out log:notIncludes ?out2.
}.


{(?out1 ?call1 ?out2 ?call2) aux:tryOptional ({} {}).}
<=
{  
 #  ?call1 log:copy ?out3.
   ( _:x _:y) log:notIncludes ?call1
}.



#test whether something is a universal variable
{?p aux:variableCheck true}<={
   ?p log:rawType ?type.
   ?type log:notEqualTo log:ForAll.
   ?p log:equalTo {?a ?b ?c}.
 }.



#########################################################
{(?a1 ?a2) aux:oneBound true}<={?a1 log:bound true. }.
{(?a1 ?a2) aux:oneBound true}<={?a2 log:bound true.}.

