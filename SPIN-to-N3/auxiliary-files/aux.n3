@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix spin: <http://spinrdf.org/spin#>.
@prefix sp: <http://spinrdf.org/sp#>.
@prefix ex: <http://example.org/spin#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix aux: <http://example.org/aux#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .


# create variable if needed
{?s aux:gets ?s1}<={?s log:uri ?suri.
 ?suri string:startsWith "http://spinrdf.org/".
 ?s e:skolem ?s1.
 ("!") e:derive true}.
{?s aux:gets ?s1}<={?s  sp:varName ?name . ?name e:skolem ?s1. ("!") e:derive true
  }.
{?s aux:gets ?s1}<={?s  sp:arg1 ?arg . ?s e:skolem ?s1. ("!") e:derive true
    }.
{?s aux:gets ?s}<={}.


{?list aux:createGraph ?graph}<={
?list aux:handleTriples ?graph1.
?list aux:handleFilter ?graph2.
?list aux:handleUnion ?graph3.

(?graph2 ?graph1 ?graph3) log:conjunction ?graph

  }.


#create a graph from subject-predicate-object patterns
{?list aux:handleTriples ?graph }<={
  #normal triples
  ({?s1 ?p1 ?o1}{?t list:in ?list. ?t sp:subject ?s;
                                               sp:predicate ?p;
                                               sp:object ?o.
                                               ?s aux:gets ?s1.
                                               ?p aux:gets ?p1.
                                               ?o aux:gets ?o1
               } ?whereList) log:collectAllIn ?scope.
               (?whereList ({})) list:append ?fl.
               ?fl  log:conjunction ?graph.


  }.

  {?list aux:handleFilter ?graph }<={
  #filter
  (?tr {?t list:in ?list. ?t a  sp:Filter ;
                              sp:expression ?e.
                ?e aux:translateFunction ?tr.
               } ?filterList) log:collectAllIn ?scope.
               (?filterList ({})) list:append ?fl.
            ?fl  log:conjunction ?graph.
}.

#union
{?list aux:handleUnion ?graph}<={
  (?t {?t list:in ?list. ?t a  sp:Union .} ?uList) log:collectAllIn ?scope.
  (?uList {}) aux:createUGraph ?graph.

  }.

{ (() ?graph) aux:createUGraph ?graph.}<={}.

{(?uList ?ingraph ) aux:createUGraph ?graph.}<={
  ?uList rdf:first ?t.
  ?t sp:elements ?elist.
  ?et list:in ?elist.
  ?et aux:handleTriples ?tr.
  ?uList rdf:rest ?rest.
  (?ingraph ?tr) log:conjunction ?newgraph.
  (?rest ?newgraph ) aux:createUGraph ?graph.
  }.

# translate function
{?e aux:translateFunction ?tr.}<=
{
#getArguments
# get  argument-predicates
(?argp {?e ?argp ?o. ?argp log:uri ?argpuri.
?argpuri string:startsWith "http://spinrdf.org/sp#arg".
    } ?ns ) log:collectAllIn ?scope.
?ns e:sort ?nsort.
# get arguments in the right order
(?argl {
  ?argp list:in ?nsort.
  ?e ?argp ?arg.
  ?arg aux:gets ?argl.
    } ?arguments ) log:collectAllIn ?scope.
?e  a ?f.

?e e:skolem ?el.
(?arguments ?f ?el ) aux:funcTranslation ?tr.
}.



#functions and their translations
{  ((?a1 ?a2) sp:lt  ?e ) aux:funcTranslation {?a1 math:lessThan ?a2}.}<={}.
{(?list sp:concat ?o) aux:funcTranslation { ?list string:concatenation ?o. }. }<={}.
{( (?a1 ?a2) sp:eq ?e ) aux:funcTranslation { ?a1 log:equalTo ?a2. }. }<={}.
