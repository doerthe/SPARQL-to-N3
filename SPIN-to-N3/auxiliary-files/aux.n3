@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix spin: <http://spinrdf.org/spin#>.
@prefix sp: <http://spinrdf.org/sp#>.
@prefix ex: <http://example.org/spin#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix aux: <http://example.org/aux#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.

# create variable if needed
{?s aux:gets ?s1}<={?s log:uri ?suri.
 ?suri string:startsWith "http://spinrdf.org/".
 ?s e:skolem ?s1.
 ("!") e:derive true}.
{?s aux:gets ?s1}<={?s  sp:varName ?name . ?name e:skolem ?s1. ("!") e:derive true
  }.
{?s aux:gets ?s}<={}.


#create a graph from subject-predicate-object patterns
{?list aux:createGraph ?graph }<={
  ({?s1 ?p1 ?o1}{?t list:in ?list. ?t sp:subject ?s;
                                               sp:predicate ?p;
                                               sp:object ?o.
                                               ?s aux:gets ?s1.
                                               ?p aux:gets ?p1.
                                               ?o aux:gets ?o1
               } ?whereList) log:collectAllIn ?scope.
  #filter
  (?tr {?t list:in ?list. ?t a  sp:Filter ;
                              sp:expression ?e.
                              ?e sp:arg1 ?a1 ;
                                sp:arg2 ?a2 ;
                                a ?f.
                                ?a1 aux:gets ?a11.
                                ?a2 aux:gets ?a22.
                  (?f ?a11 ?a22) aux:funcTranslation ?tr.
               } ?filterList) log:collectAllIn ?scope.
            (?whereList ?filterList  ) list:append ?outList.
            ?outList  log:conjunction ?graph.
  }.

#functions and their translations
{  (sp:lt ?a1 ?a2) aux:funcTranslation {?a1 math:lessThan ?a2}.}<={}.
