@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix spin: <http://spinrdf.org/spin#>.
@prefix sp: <http://spinrdf.org/sp#>.
@prefix ex: <http://example.org/spin#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix aux: <http://example.org/aux#>.

# rule to generate rule
{   ?x a       sp:Construct ;
      sp:templates ?temps ;
      sp:where ?where.
 	    ?where aux:createGraph ?g1.
      ?temps aux:handleTriples ?g2
	}=>{?g1=>?g2. }.

  # rule to generate rule
  {   ?x a       sp:Ask ;
        sp:where ?where.
   	   ?where aux:createGraph ?g1.
  	}=>{?g1 => {[] ex:result true}. {(1 ?g1 ()) log:collectAllIn ?scope}=>{[] ex:result false}
    }.


## select with aggregates
{     ?x a sp:Select .
      ?x!sp:groupBy!list:member!sp:varName e:skolem ?groupVar .
      ("!") e:derive true .

      ?x!sp:resultVariables list:member [ sp:expression ?exp ] .
      ?exp a ?aggrFn .
      ?exp!sp:expression!sp:varName e:skolem ?aggrVar .

      ?x!sp:where aux:createGraph ?g .
      ?x aux:getResultVariables ?outVars .

      # should be able to collect instances of these variables here,
      # given ?g as the clause
      # but, doesn't work since these are skolems :-(

      ( ( ?aggrVar ?groupVar )
      ?g
      ?pairs ) log:collectAllIn _:t .

} => {
      ?g1 => { [] ex:result ?outVars }.
} .


## select
{   ?x a       sp:Select .

    ?x  sp:where ?where.
    ?x aux:getResultVariables ?outvars.
     ?where aux:createGraph ?g1.

  }=>{?g1 => {[] ex:result ?outvars}.
  }.