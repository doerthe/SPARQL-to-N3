# Test list syntax
#
#  With no {} so it can be translated in DAML easily
#

@prefix t: <test#> .
@prefix : <test#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

# This is cheating a bit - in case output of first and rest is needed.

@prefix dpo: <http://www.daml.org/2001/03/daml+oil#>.

# Other interesting unimplemented syntaxes ...
#[ log:first :a;
#  ont:rest thatWhich has ont:first :b; 
#  ont:rest thatWhich has ont:first :c; 
#  ont:rest thatWhich has ont:first :d; 
#  ont:rest thatWhich has ont:first :e ];
#
# etc
#
#( :a :b :c :d :e )
#_________________________________________
# cwm output from one version:
#:threeItems = ( :b :c :d ) .
#
#:nested =( :first :second ( :left3 :right3 ) :fourth )  .
#
#:emptyList = ( ) .
#
#:listOf2Empties = (()()) .
#
#:twoAnons = ([a :mother][a :father]).
#

# :a_threebrackets = ( ( ( :fff ) ) ) .

[ :anonVerb12 :anonObj12 ] :verb12 :obj12.

:threeItems = ( :b :c :d ) .

:nested =( :first :second ( :left3 :right3 ) :fourth )  .

:emptyList = ( ) .

:listOf2Empties = (()()) .

:twoAnons = ([a :mother][a :father]).

() :verb0 :object0.
( "subj1" ) :verb1 :object1.
( "subj2a" "subj2b" ) :verb2 :object2.

# Supressed: - see lists.n3 for version with this in
# :twoFormulae = ({:a a :mother} {:b a :father}).


#ENDS

