# @alsoload tmp.spin

@prefix math: <http://www.w3.org/2000/10/swap/math#> . 
@prefix log: <http://www.w3.org/2000/10/swap/log#> . 
@prefix string: <http://www.w3.org/2000/10/swap/string#> . 
@prefix list: <http://www.w3.org/2000/10/swap/list#> . 
@prefix sp: <http://spinrdf.org/sp#> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix aux: <http://example.org/aux#>.

{
    ?x aux:collectPaths ?paths
} <= {
    ?x a sp:SeqPath ;
        sp:path1 ?p1 ;
        sp:path2 ?p2 .

    ?p1 aux:collectPaths ?p1s .
    ?p2 aux:collectPaths ?p2s .

    ( ?p1s ?p2s ) list:append ?paths .
} .

{
    ?x aux:collectPaths ?paths
} <= {
    _:t log:notIncludes { ?x a sp:SeqPath } .
    ?x log:rawType log:Other .
    ?paths log:equalTo ( ?x ) .
} .

# testing collection of paths
# {
#     ?x sp:where ?where .
#     ?where list:member ?tp .
#     ?tp sp:path ?path .

#     ?path aux:collectPaths ?paths

# } => {
#     <> :out ?paths .
# } .

{
    ?x sp:where ?where .

    ?where list:member ?tp .
    ?tp a sp:TriplePath ;
        sp:path ?path .

    "T0" log:trace ( ?path ) .

    ?path aux:collectPaths ?pathPreds .
    "T1" log:trace ( ?pathPreds ) .

    ?tp!sp:subject log:skolem ?ss .
    ?tp!sp:object log:skolem ?os .

    ?pathPreds list:length ?len .

    ( ?pathVar
    {   ?pathPreds list:iterate ( ?i [] ) .
        ?i math:lessThan ( ?len -1 )!math:sum .
        ?i log:skolem ?pathVar .

    } ?intermPathVars ) log:collectAllIn _:t .

    ( ( ?ss ) ?intermPathVars ( ?os ) ) list:append ?pathVars .

    "T2" log:trace ( ?pathVars ) .

    ( ?pathTriple
    {   ?pathPreds list:iterate ( ?cur ?pathPred ).

        ( ?pathVars ?cur ) list:memberAt ?startVar .
        ( ?cur 1 )  math:sum ?next .
        ( ?pathVars ?next ) list:memberAt ?endVar .

        { ?startVar ?pathPred ?endVar } log:equalTo ?pathTriple .

    } ?pathTriples ) log:collectAllIn _:t . 

} => {
    <> :out ?pathTriples .
} .